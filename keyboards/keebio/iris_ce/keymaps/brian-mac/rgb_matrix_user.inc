// !!! DO NOT ADD #pragma once !!! //
// see https://docs.qmk.fm/features/rgb_matrix#custom-rgb-matrix-effects
// Step 1.
// Declare custom effects using the RGB_MATRIX_EFFECT macro
// (note the lack of semicolon after the macro!)
RGB_MATRIX_EFFECT(dynamic_effect)



// Step 2.
// Define effects inside the `RGB_MATRIX_CUSTOM_EFFECT_IMPLS` ifdef block
#ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
#include "layers.h"

bool layer_state_is(uint8_t layer);


#define ___o___ (HSV){43,180,100}
#define ___v___ (HSV){1,1,1}
#define OFF (HSV){0,0,0}
#define _______ OFF

#define R3(val) (HSV){0,  85,val}  // red
#define R5(val) (HSV){0, 142,val}  // red
#define R7(val) (HSV){0, 200,val}  // red
#define R9(val) (HSV){0, 255,val}  // red

#define O3(val) (HSV){21, 85,val}  // orange
#define O5(val) (HSV){21,142,val}  // orange
#define O7(val) (HSV){21,200,val}  // orange
#define O9(val) (HSV){21,255,val}  // orange

#define Y3(val) (HSV){43, 85,val}  // yellow
#define Y5(val) (HSV){43,142,val}  // yellow
#define Y7(val) (HSV){43,200,val}  // yellow
#define Y9(val) (HSV){43,255,val}  // yellow

#define A3(val) (HSV){64, 85,val}  // green
#define A5(val) (HSV){64,142,val}  // green
#define A7(val) (HSV){64,200,val}  // green
#define A9(val) (HSV){64,255,val}  // apple

#define G3(val) (HSV){85, 85,val}  // green
#define G5(val) (HSV){85,142,val}  // green
#define G7(val) (HSV){85,200,val}  // green
#define G9(val) (HSV){85,255,val}  // green

#define L3(val) (HSV){106, 85,val}  // leaf
#define L5(val) (HSV){106,142,val}  // leaf
#define L7(val) (HSV){106,200,val}  // leaf
#define L9(val) (HSV){106,255,val}  // leaf

#define C3(val) (HSV){127, 85,val}  // cyan
#define C5(val) (HSV){127,142,val}  // cyan
#define C7(val) (HSV){127,200,val}  // cyan
#define C9(val) (HSV){127,255,val}  // cyan

#define B3(val) (HSV){148, 85,val}  // blue
#define B5(val) (HSV){148,142,val}  // blue
#define B7(val) (HSV){148,200,val}  // blue
#define B9(val) (HSV){148,255,val}  // blue

#define I3(val) (HSV){170, 85,val}  // indigo
#define I5(val) (HSV){170,142,val}  // indigo
#define I7(val) (HSV){170,200,val}  // indigo
#define I9(val) (HSV){170,255,val}  // indigo

#define V3(val) (HSV){180, 85,val}  // violet
#define V5(val) (HSV){180,142,val}  // violet
#define V7(val) (HSV){180,200,val}  // violet
#define V9(val) (HSV){180,255,val}  // violet

#define M3(val) (HSV){201, 85,val}  // magenta
#define M5(val) (HSV){201,142,val}  // magenta
#define M7(val) (HSV){201,200,val}  // magenta
#define M9(val) (HSV){201,255,val}  // magenta

#define P3(val) (HSV){222, 85,val}  // pink
#define P5(val) (HSV){222,142,val}  // pink
#define P7(val) (HSV){222,200,val}  // pink
#define P9(val) (HSV){222,255,val}  // pink


int KEY_LED_ROW_COL[5][14] =
{
    { 0, 2, 3, 5, 6, 8,-1,-1,42,40,39,37,36,34},
    {14,13,12,11,10, 9,-1,-1,43,44,45,46,47,48},
    {15,16,17,18,19,20,-1,-1,54,53,52,51,50,49},
    {26,25,24,23,22,21,33,67,55,56,57,58,59,60},
    {-1,-1,-1,-1,29,30,32,66,64,63,-1,-1,-1,-1}
};

int UNDER_LED_ROW_COL[2][6] =
{
    { 1, 4, 7,41,38,35},
    {27,28,31,65,62,61}
};

HSV LIGHTING[][5][14] = {
    [_MAC] = {
        {___v___,___v___,___v___,___v___,___v___,___v___,_______,      _______,C7(100),___v___,___v___,___v___,___v___,___v___},
        {___v___,___v___,___v___,___v___,___v___,___v___,_______,      _______,___v___,___v___,___v___,___v___,___v___,___v___},
        {___v___,___v___,___v___,___v___,___v___,___v___,_______,      _______,___v___,___v___,___v___,___v___,___v___,___v___},
        {___v___,___v___,___v___,___v___,___v___,___v___,___v___,      ___v___,___v___,___v___,___v___,___v___,___v___,___v___},
        {_______,_______,_______,_______,___v___,___v___,___v___,      ___v___,___v___,___v___,_______,_______,_______,_______},
    },
    [_WIN] = {
        {___v___,___v___,___v___,___v___,___v___,___v___,_______,      _______,___v___,C7(100),___v___,___v___,___v___,___v___},
        {___v___,___v___,___v___,___v___,___v___,___v___,_______,      _______,___v___,___v___,___v___,___v___,___v___,___v___},
        {___v___,___v___,___v___,___v___,___v___,___v___,_______,      _______,___v___,___v___,___v___,___v___,___v___,___v___},
        {___v___,___v___,___v___,___v___,___v___,___v___,___v___,      ___v___,___v___,___v___,___v___,___v___,___v___,___v___},
        {_______,_______,_______,_______,___v___,___v___,___v___,      ___v___,___v___,___v___,_______,_______,_______,_______},
    },
    [_MAC_CMK] = {
        {___v___,C7(100),___v___,___v___,___v___,___v___,_______,      _______,___v___,___v___,___v___,___v___,___v___,___v___},
        {___v___,___v___,___v___,___v___,___v___,___v___,_______,      _______,___v___,___v___,___v___,___v___,___v___,___v___},
        {___v___,___v___,___v___,___v___,___v___,___v___,_______,      _______,___v___,___v___,___v___,___v___,___v___,___v___},
        {___v___,___v___,___v___,___v___,___v___,___v___,___v___,      ___v___,___v___,___v___,___v___,___v___,___v___,___v___},
        {_______,_______,_______,_______,___v___,___v___,___v___,      ___v___,___v___,___v___,_______,_______,_______,_______},
    },
    [_WIN_CMK] = {
        {___v___,___v___,C7(100),___v___,___v___,___v___,_______,      _______,___v___,___v___,___v___,___v___,___v___,___v___},
        {___v___,___v___,___v___,___v___,___v___,___v___,_______,      _______,___v___,___v___,___v___,___v___,___v___,___v___},
        {___v___,___v___,___v___,___v___,___v___,___v___,_______,      _______,___v___,___v___,___v___,___v___,___v___,___v___},
        {___v___,___v___,___v___,___v___,___v___,___v___,___v___,      ___v___,___v___,___v___,___v___,___v___,___v___,___v___},
        {_______,_______,_______,_______,___v___,___v___,___v___,      ___v___,___v___,___v___,_______,_______,_______,_______},
    },
    [_RHINO] = {
        {_______,R9(60 ),R9(60 ),R9(60 ),R9(60 ),_______,_______,      _______,_______,_______,_______,_______,_______,_______},
        {_______,_______,_______,_______,_______,_______,_______,      _______,_______,_______,_______,_______,_______,_______},
        {_______,_______,_______,_______,_______,_______,_______,      _______,_______,_______,_______,_______,_______,_______},
        {_______,_______,_______,_______,_______,_______,_______,      _______,_______,_______,_______,_______,_______,_______},
        {_______,_______,_______,_______,___v___,___v___,___v___,      ___v___,___v___,___v___,_______,_______,_______,_______},
    },
    [_LOWER] = {
        {___v___,R5(60 ),R5(90 ),G9(80 ),___v___,___v___,_______,      _______,___v___,___v___,___v___,___v___,___v___,I9(120)},
        {___v___,I5(80 ),I5(80 ),R9(80 ),___v___,___v___,_______,      _______,___v___,G9(90 ),A9(120),G9(90 ),___v___,___v___},
        {___v___,___v___,___v___,___v___,___v___,___v___,_______,      _______,___v___,A9(120),_______,A9(120),___v___,___v___},
        {___v___,Y7(140),Y7(140),Y7(140),Y7(140),___v___,___v___,      ___v___,___v___,G9(90 ),A9(120),G9(90 ),___v___,___v___},
        {_______,_______,_______,_______,___v___,___v___,___v___,      ___v___,___v___,___v___,_______,_______,_______,_______},
    },
    [_WIN_LOWER] = {
        {___v___,R5(60 ),R5(90 ),G9(80 ),___v___,___v___,_______,      _______,___v___,___v___,___v___,___v___,___v___,I9(120)},
        {___v___,I5(80 ),I5(80 ),R9(80 ),___v___,___v___,_______,      _______,___v___,G9(90 ),A9(120),G9(90 ),___v___,___v___},
        {___v___,___v___,___v___,___v___,___v___,___v___,_______,      _______,___v___,A9(120),_______,A9(120),___v___,___v___},
        {___v___,Y7(140),Y7(140),Y7(140),Y7(140),___v___,___v___,      ___v___,___v___,G9(90 ),A9(120),G9(90 ),___v___,___v___},
        {_______,_______,_______,_______,___v___,___v___,___v___,      ___v___,___v___,___v___,_______,_______,_______,_______},
    },
    [_NUMPAD] = {
        {M3(100),M3(100),M3(100),M3(100),M3(100),M3(100),_______,      _______,M3(100),M3(100),M3(100),M3(100),M3(100),M3(100)},
        {___v___,_______,_______,_______,_______,_______,_______,      _______,_______,B9(100),B9(100),B9(100),___v___,_______},
        {___v___,_______,_______,_______,_______,___v___,_______,      _______,___v___,B9(100),B9(100),B9(100),___v___,_______},
        {___v___,_______,_______,_______,_______,___v___,___v___,      ___v___,___v___,B9(100),B9(100),B9(100),___v___,_______},
        {_______,_______,_______,_______,___v___,___v___,___v___,      ___v___,___v___,B9(100),_______,_______,_______,_______},
    },
    [_SYMBOLS] = {
        {M3(100),M3(100),M3(100),M3(100),M3(100),M3(100),_______,      _______,M3(100),M3(100),M3(100),M3(100),M3(100),M3(100)},
        {_______,A9(90 ),A9(90 ),A9(90 ),A9(90 ),A9(90 ),_______,      _______,A9(90 ),A9(90 ),A9(90 ),A9(90 ),A9(90 ),___v___},
        {_______,O9(120),A9(90 ),L9(90 ),B9(90 ),_______,_______,      _______,_______,B9(90 ),L9(90 ),A9(90 ),O9(120),_______},
        {_______,_______,_______,Y9(90 ),Y7(140),Y9(90 ),___v___,      ___v___,_______,Y7(140),Y9(90 ),_______,_______,_______},
        {_______,_______,_______,_______,___v___,___v___,___v___,      ___v___,___v___,___v___,_______,_______,_______,_______},
    },
    [_MOUSE] = {
        {_______,C7(100),C7(100),G9(90 ),M3(100),B9(100),_______,      _______,C7(100),_______,_______,_______,_______,_______},
        {_______,_______,_______,_______,_______,_______,_______,      _______,_______,A5(100),C7(100),_______,_______,_______},
        {_______,_______,_______,B7(100),B7(100),_______,_______,      _______,B7(100),C7(100),_______,C7(100),B7(100),_______},
        {_______,_______,_______,_______,I7(100),_______,___v___,      ___v___,I7(100),A5(100),C7(100),_______,_______,_______},
        {_______,_______,_______,_______,___v___,___v___,___v___,      ___v___,___v___,___v___,_______,_______,_______,_______},
    },

};

HSV _BASE[5][14] = {
    {___o___,___o___,___o___,___o___,___o___,___o___,_______,      _______,___o___,___o___,___o___,___o___,___o___,___o___},
    {___o___,___o___,___o___,___o___,___o___,___o___,_______,      _______,___o___,___o___,___o___,___o___,___o___,___o___},
    {___o___,___o___,___o___,___o___,Y7(100),___o___,_______,      _______,___o___,Y7(100),___o___,___o___,___o___,___o___},
    {___o___,___o___,___o___,___o___,___o___,___o___,___o___,      ___o___,___o___,___o___,___o___,___o___,___o___,___o___},
    {_______,_______,_______,_______,___o___,___o___,___o___,      ___o___,___o___,___o___,_______,_______,_______,_______},
};


static void rgb_matrix_set_hsv(uint8_t index, HSV hsv) {
    RGB rgb = hsv_to_rgb(hsv);
    rgb_matrix_set_color(index, rgb.r, rgb.g, rgb.b);
}

static void set_all_underglow(HSV color) {
    RGB rgb = hsv_to_rgb(color);
    for (int i = 0; i < 2; i++) {
        for (int j=0; j<6; j++) {
            if (UNDER_LED_ROW_COL[i][j] == -1) {
                continue;
            }
            rgb_matrix_set_color(UNDER_LED_ROW_COL[i][j], rgb.r, rgb.g, rgb.b);
        }
    }
}

static void apply_effect(HSV keys[5][14]) {
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 14; j++) {
            if (KEY_LED_ROW_COL[i][j] == -1) {
                continue;
            }
            if (keys[i][j].h == 1 && keys[i][j].s == 1 && keys[i][j].v == 1) {
                continue;  // pass through
            }
            rgb_matrix_set_hsv(KEY_LED_ROW_COL[i][j], keys[i][j]);
        }
    }
}

static bool dynamic_effect(effect_params_t* params) {
    set_all_underglow(_______);

    HSV values[5][14] = {0};
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 14; j++) {
           values[i][j] = _BASE[i][j];
        }
    }

    for (int layer=0; layer <= 8; layer++) {
        if (layer_state_is(layer)) {
            for (int i = 0; i < 5; i++) {
                for (int j = 0; j < 14; j++) {
                    if (LIGHTING[layer][i][j].h == 1 && LIGHTING[layer][i][j].s == 1 && LIGHTING[layer][i][j].v == 1) {
                        continue;  // pass through
                    }
                    // else if (layer == _FUNC) {

                    //     HSV existing = values[i][j];
                    //     HSV blend = LIGHTING[layer][i][j];

                    //     if (existing.h ==___o___.h && existing.s ==___o___.s && existing.v ==___o___.v) {
                    //         values[i][j] = blend;
                    //     }
                    // }
                    else {
                        values[i][j] = LIGHTING[layer][i][j];
                    }
                }
            }
        }
    }

    apply_effect(values);
    return false;
}

#endif // RGB_MATRIX_CUSTOM_EFFECT_IMPLS
